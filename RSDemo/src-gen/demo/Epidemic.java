package demo;

// imports

import repast.simphony.systemdynamics.support.SDModelWithPropertiesVDM_Native;
import repast.simphony.engine.schedule.ISchedule;
import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.parameter.Parameters;
import repast.simphony.systemdynamics.support.MessageJava;
import repast.simphony.systemdynamics.support.ResultsReporterJava;
import repast.simphony.systemdynamics.support.SDFunctionsWithXLSColt;


public class Epidemic extends SDModelWithPropertiesVDM_Native {

private MemoryEpidemic memory;
public Epidemic(String name) {
this(name, null);
}

public Epidemic(String name, String[] args) {
super(name,true, args);

sdFunctions = new SDFunctionsWithXLSColt(this);
message = new MessageJava();
results = new ResultsReporterJava();
memory = new MemoryEpidemic();


timeSeriesData.setNativeDataTypes(true);
oneTime();
}

public MemoryEpidemic getMemory() {
return memory;
}

@Override
public double getINITIALTIME() {
return memory.getINITIALTIME();
}
@Override
public double getFINALTIME() {
return memory.getFINALTIME();
}
@Override
public double getTIMESTEP() {
return memory.getTIMESTEP();
}
protected void oneTime0() {

double time = 0.0;
double timeStep = getTIMESTEP();
Parameters params = RunEnvironment.getInstance().getParameters();
/*
	Equation: NAREPLACEMENT = 0.0000001

	Units:any

	Comment: This is autogenerated

*/
{
    memory.NAREPLACEMENT = 0.0000001;
logit("memory.NAREPLACEMENT", getINITIALTIME(), 0.0000001,memory.get_SAVEPER());
}
/*
	Equation: FINAL TIME = 50.0

	Units:day

	Comment: None Provided

*/
{
    memory.FINAL_TIME = (Double) params.getValue("FINAL_TIME"); // 2;
logit("memory.FINAL_TIME", getINITIALTIME(), (Double) params.getValue("FINAL_TIME"),memory.get_SAVEPER());
}
/*
	Equation: rate that people contact other people=2

	Units:1/day

	Comment: None Provided

*/
{
    memory.rate_that_people_contact_other_people = (Double) params.getValue("rate_that_people_contact_other_people"); // 2;
logit("memory.rate_that_people_contact_other_people", getINITIALTIME(), (Double) params.getValue("rate_that_people_contact_other_people"),memory.get_SAVEPER());
}
/*
	Equation: initial susceptible=1000000.0

	Units:people

	Comment: None Provided

*/
{
    memory.initial_susceptible = (Double) params.getValue("initial_susceptible"); // 2;
logit("memory.initial_susceptible", getINITIALTIME(), (Double) params.getValue("initial_susceptible"),memory.get_SAVEPER());
}
/*
	Equation: Time=0.0

	Units:day

	Comment: This is autogenerated

*/
{
    memory.Time = 0.0;
logit("memory.Time", getINITIALTIME(), 0.0,memory.get_SAVEPER());
}
/*
	Equation: INITIAL TIME = 0.0

	Units:day

	Comment: None Provided

*/
{
    memory.INITIAL_TIME = (Double) params.getValue("INITIAL_TIME"); // 2;
logit("memory.INITIAL_TIME", getINITIALTIME(), (Double) params.getValue("INITIAL_TIME"),memory.get_SAVEPER());
}
/*
	Equation: initial infected=10

	Units:people

	Comment: None Provided

*/
{
    memory.initial_infected = (Double) params.getValue("initial_infected"); // 2;
logit("memory.initial_infected", getINITIALTIME(), (Double) params.getValue("initial_infected"),memory.get_SAVEPER());
}
/*
	Equation: TIME STEP = 1.0

	Units:day

	Comment: None Provided

*/
{
    memory.TIME_STEP = (Double) params.getValue("TIME_STEP"); // 2;
logit("memory.TIME_STEP", getINITIALTIME(), (Double) params.getValue("TIME_STEP"),memory.get_SAVEPER());
}
/*
	Equation: fraction infected from contact=0.1

	Units:dmnl

	Comment: None Provided

*/
{
    memory.fraction_infected_from_contact = (Double) params.getValue("fraction_infected_from_contact"); // 2;
logit("memory.fraction_infected_from_contact", getINITIALTIME(), (Double) params.getValue("fraction_infected_from_contact"),memory.get_SAVEPER());
}
/*
	Equation: SAVEPER = 1.0

	Units:day

	Comment: None Provided

*/
{
    memory.SAVEPER = (Double) params.getValue("SAVEPER"); // 2;
logit("memory.SAVEPER", getINITIALTIME(), (Double) params.getValue("SAVEPER"),memory.get_SAVEPER());
}
{
/*
	Equation: Infected= INTEG(getting sick,initial infected)

	Units:people

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = sdFunctions.INTEG("Infected",memory.Infected,time,timeStep,(time == 0.0 ? 0.0 : (memory.getting_sick) ),(memory.initial_infected));
memory.Infected = _t0;
/* log6 */logit("memory.Infected",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: Healthy= INTEG(-getting sick,initial susceptible)

	Units:people

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = sdFunctions.INTEG("Healthy",memory.Healthy,time,timeStep,(time == 0.0 ? 0.0 : (- (memory.getting_sick)) ),(memory.initial_susceptible));
memory.Healthy = _t0;
/* log6 */logit("memory.Healthy",time,_t0,memory.get_SAVEPER());
}
}

protected void oneTime() {

   oneTime0();
}

@ScheduledMethod(start = 1,interval = 1,shuffle = true)
public void step() {
ISchedule schedule = repast.simphony.engine.environment.RunEnvironment
.getInstance().getCurrentSchedule();
double timeStep = memory.getTIMESTEP();
double time = memory.getINITIALTIME() + (schedule.getTickCount() - 1.0);
double nextTime = time + 1.0;
while (time < nextTime) {
memory.Time = time;
currentTime = time;
repeated(time, timeStep);
time += timeStep;
}
}

protected void repeated0(double time, double timeStep) {

{
/*
	Equation: Infected= INTEG(getting sick,initial infected)

	Units:people

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = sdFunctions.INTEG("Infected",memory.Infected,time,timeStep,(time == 0.0 ? 0.0 : (memory.getting_sick) ),(memory.initial_infected));
memory.Infected = _t0;
/* log6 */logit("memory.Infected",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: Healthy= INTEG(-getting sick,initial susceptible)

	Units:people

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = sdFunctions.INTEG("Healthy",memory.Healthy,time,timeStep,(time == 0.0 ? 0.0 : (- (memory.getting_sick)) ),(memory.initial_susceptible));
memory.Healthy = _t0;
/* log6 */logit("memory.Healthy",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: rate of potential infectious contacts=Healthy  * rate that people contact other people

	Units:people/day

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = (memory.Healthy) * (memory.rate_that_people_contact_other_people);
memory.rate_of_potential_infectious_contacts = _t0;
/* log6 */logit("memory.rate_of_potential_infectious_contacts",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: total population=Healthy + Infected

	Units:people

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = (memory.Healthy) + (memory.Infected);
memory.total_population = _t0;
/* log6 */logit("memory.total_population",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: Fraction of population infected=Infected / total population

	Units:dmnl

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = (memory.Infected) / (memory.total_population);
memory.Fraction_of_population_infected = _t0;
/* log6 */logit("memory.Fraction_of_population_infected",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: Contacts between infected and unaffected=rate of potential infectious contacts  * Fraction of population infected

	Units:people/day

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = (memory.rate_of_potential_infectious_contacts) * (memory.Fraction_of_population_infected);
memory.Contacts_between_infected_and_unaffected = _t0;
/* log6 */logit("memory.Contacts_between_infected_and_unaffected",time,_t0,memory.get_SAVEPER());
}
{
/*
	Equation: getting sick=Contacts between infected and unaffected  * fraction infected from contact

	Units:people/day

	Comment: None Provided

*/
double _t0 = 0.0;
_t0 = (memory.Contacts_between_infected_and_unaffected) * (memory.fraction_infected_from_contact);
memory.getting_sick = _t0;
/* log6 */logit("memory.getting_sick",time,_t0,memory.get_SAVEPER());
}
}

protected void repeated(double time, double timeStep) {

  data.setCurrentTime(time);
  setValue("Time", time);
  timeSeriesData.advanceTime(data, time);
  updateTimeSeriesReferences(time);
   repeated0(time, timeStep);
}

public double getContacts_between_infected_and_unaffected() {return memory.Contacts_between_infected_and_unaffected;}
public void   setContacts_between_infected_and_unaffected(double value) {memory.Contacts_between_infected_and_unaffected = value;}
public double getFINAL_TIME() {return memory.FINAL_TIME;}
public void   setFINAL_TIME(double value) {memory.FINAL_TIME = value;}
public double getFraction_of_population_infected() {return memory.Fraction_of_population_infected;}
public void   setFraction_of_population_infected(double value) {memory.Fraction_of_population_infected = value;}
public double getHealthy() {return memory.Healthy;}
public void   setHealthy(double value) {memory.Healthy = value;}
public double getINITIAL_TIME() {return memory.INITIAL_TIME;}
public void   setINITIAL_TIME(double value) {memory.INITIAL_TIME = value;}
public double getInfected() {return memory.Infected;}
public void   setInfected(double value) {memory.Infected = value;}
public double getNAREPLACEMENT() {return memory.NAREPLACEMENT;}
public void   setNAREPLACEMENT(double value) {memory.NAREPLACEMENT = value;}
public double getSAVEPER() {return memory.SAVEPER;}
public void   setSAVEPER(double value) {memory.SAVEPER = value;}
public double getTIME_STEP() {return memory.TIME_STEP;}
public void   setTIME_STEP(double value) {memory.TIME_STEP = value;}
public double getTime() {return memory.Time;}
public void   setTime(double value) {memory.Time = value;}
public double getFraction_infected_from_contact() {return memory.fraction_infected_from_contact;}
public void   setFraction_infected_from_contact(double value) {memory.fraction_infected_from_contact = value;}
public double getGetting_sick() {return memory.getting_sick;}
public void   setGetting_sick(double value) {memory.getting_sick = value;}
public double getInitial_infected() {return memory.initial_infected;}
public void   setInitial_infected(double value) {memory.initial_infected = value;}
public double getInitial_susceptible() {return memory.initial_susceptible;}
public void   setInitial_susceptible(double value) {memory.initial_susceptible = value;}
public double getRate_of_potential_infectious_contacts() {return memory.rate_of_potential_infectious_contacts;}
public void   setRate_of_potential_infectious_contacts(double value) {memory.rate_of_potential_infectious_contacts = value;}
public double getRate_that_people_contact_other_people() {return memory.rate_that_people_contact_other_people;}
public void   setRate_that_people_contact_other_people(double value) {memory.rate_that_people_contact_other_people = value;}
public double getTotal_population() {return memory.total_population;}
public void   setTotal_population(double value) {memory.total_population = value;}
protected void updateTimeSeriesReferences(double time) {

}

}

