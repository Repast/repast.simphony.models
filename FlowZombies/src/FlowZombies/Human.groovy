/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package FlowZombies

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Human  {

    /**
     *
     * This is an agent property.
     * @field energy
     *
     */
    @Parameter (displayName = "Energy", usageName = "energy")
    public int getEnergy() {
        return energy
    }
    public void setEnergy(int newValue) {
        energy = newValue
    }
    public int energy = 10

    /**
     *
     * This is an agent property.
     * @field startingEnergy
     *
     */
    @Parameter (displayName = "Start Energy", usageName = "startingEnergy")
    public int getStartingEnergy() {
        return startingEnergy
    }
    public void setStartingEnergy(int newValue) {
        startingEnergy = newValue
    }
    public int startingEnergy = 10

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Human " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method run
     *
     */
    @Watch(
        watcheeClassName = 'FlowZombies.Zombie',
        watcheeFieldNames = 'moved',
        query = 'within_vn 1',
        whenToTrigger = WatcherTriggerSchedule.IMMEDIATE
    )
    public def run(FlowZombies.Zombie watchedAgent) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Grid grid = FindGrid("FlowZombies/grid")
        GridPoint pt = grid.getLocation(this)
        GridCellNgh nghCreator = new GridCellNgh(grid, pt, Zombie.class,1,1)
        List gridCells = nghCreator.getNeighborhood(true)
        SimUtilities.shuffle(gridCells, RandomHelper.getUniform())
        // This is a task.
        GridPoint pointWithLeastZombies = null
        int minCount = Integer.MAX_VALUE

        // This is a loop.
        for (GridCell cell in gridCells) {


            // This is an agent decision.
            if (cell.size() < minCount) {

                // This is a task.
                pointWithLeastZombies = cell.getPoint();
                minCount = cell.size();

            } else  {


            }

        }


        // This is an agent decision.
        if (energy > 0) {

            // This is a task.
            int x = pointWithLeastZombies.getX()
            int y = pointWithLeastZombies.getY()
            grid.moveTo(this,x,y)
            energy--

        } else  {

            // This is a task.
            setEnergy(startingEnergy)

        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

