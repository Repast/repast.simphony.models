/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package FlowZombies

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class Zombie  {

    /**
     *
     * This is an agent property.
     * @field moved
     *
     */
    @Parameter (displayName = "Moved", usageName = "moved")
    public boolean getMoved() {
        return moved
    }
    public void setMoved(boolean newValue) {
        moved = newValue
    }
    public boolean moved = false

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "Zombie " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method step
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = true
    )
    public def step() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Grid grid = FindGrid("FlowZombies/grid")
        GridPoint pt = grid.getLocation(this)
        GridCellNgh nghCreator = new GridCellNgh(grid, pt, Human.class, 1, 1)
        List gridCells = nghCreator.getNeighborhood(true)
        SimUtilities.shuffle(gridCells, RandomHelper.getUniform())
        // This is a task.
        GridPoint pointWithMostHumans = null
        int maxCount = -1

        // This is a loop.
        for (GridCell cell in gridCells) {


            // This is an agent decision.
            if (cell.size() > maxCount) {

                // This is a task.
                pointWithMostHumans = cell.getPoint()
                maxCount = cell.size()

            } else  {


            }

        }

        // This is a task.
        int x = pointWithMostHumans.getX()
        int y = pointWithMostHumans.getY()
        grid.moveTo(this,x,y)
        setMoved(true)
        infect()
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method infect
     *
     */
    public def infect() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Grid grid = FindGrid("FlowZombies/grid")
        GridPoint pt = grid.getLocation(this)
        List humans = new ArrayList();
        Iterable objects = grid.getObjectsAt(pt.getX(), pt.getY())

        // This is a loop.
        while (objects.hasNext()) {

            // This is a task.
            Object o = objects.next()

            // This is an agent decision.
            if (o instanceof Human) {

                // This is a task.
                humans.add(o)

            } else  {


            }

        }


        // Found Humans?
        if (humans.size() > 0) {

            // This is a task.
            int index = RandomHelper.nextIntFromTo(0, humans.size() - 1)
            Object human = humans.get(index)
            Context context = RemoveAgentFromContext("FlowZombies", human)
            Object zombie = CreateAgents("FlowZombies", "FlowZombies.Zombie", 1)
            MoveAgent("FlowZombies/grid", zombie, pt.getX(), pt.getY())

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

